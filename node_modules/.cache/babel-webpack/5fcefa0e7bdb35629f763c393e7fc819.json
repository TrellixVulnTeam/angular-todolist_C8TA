{"ast":null,"code":"'use strict';\n/**\n * @license Angular v12.0.0-next.0\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (factory) {\n  typeof define === 'function' && define.amd ? define(factory) : factory();\n})(function () {\n  'use strict';\n  /**\n   * @license\n   * Copyright Google LLC All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n\n  (function (_global) {\n    var AsyncTestZoneSpec = function () {\n      function AsyncTestZoneSpec(finishCallback, failCallback, namePrefix) {\n        this.finishCallback = finishCallback;\n        this.failCallback = failCallback;\n        this._pendingMicroTasks = false;\n        this._pendingMacroTasks = false;\n        this._alreadyErrored = false;\n        this._isSync = false;\n        this.runZone = Zone.current;\n        this.unresolvedChainedPromiseCount = 0;\n        this.supportWaitUnresolvedChainedPromise = false;\n        this.name = 'asyncTestZone for ' + namePrefix;\n        this.properties = {\n          'AsyncTestZoneSpec': this\n        };\n        this.supportWaitUnresolvedChainedPromise = _global[Zone.__symbol__('supportWaitUnResolvedChainedPromise')] === true;\n      }\n\n      AsyncTestZoneSpec.prototype.isUnresolvedChainedPromisePending = function () {\n        return this.unresolvedChainedPromiseCount > 0;\n      };\n\n      AsyncTestZoneSpec.prototype._finishCallbackIfDone = function () {\n        var _this = this;\n\n        if (!(this._pendingMicroTasks || this._pendingMacroTasks || this.supportWaitUnresolvedChainedPromise && this.isUnresolvedChainedPromisePending())) {\n          // We do this because we would like to catch unhandled rejected promises.\n          this.runZone.run(function () {\n            setTimeout(function () {\n              if (!_this._alreadyErrored && !(_this._pendingMicroTasks || _this._pendingMacroTasks)) {\n                _this.finishCallback();\n              }\n            }, 0);\n          });\n        }\n      };\n\n      AsyncTestZoneSpec.prototype.patchPromiseForTest = function () {\n        if (!this.supportWaitUnresolvedChainedPromise) {\n          return;\n        }\n\n        var patchPromiseForTest = Promise[Zone.__symbol__('patchPromiseForTest')];\n\n        if (patchPromiseForTest) {\n          patchPromiseForTest();\n        }\n      };\n\n      AsyncTestZoneSpec.prototype.unPatchPromiseForTest = function () {\n        if (!this.supportWaitUnresolvedChainedPromise) {\n          return;\n        }\n\n        var unPatchPromiseForTest = Promise[Zone.__symbol__('unPatchPromiseForTest')];\n\n        if (unPatchPromiseForTest) {\n          unPatchPromiseForTest();\n        }\n      };\n\n      AsyncTestZoneSpec.prototype.onScheduleTask = function (delegate, current, target, task) {\n        if (task.type !== 'eventTask') {\n          this._isSync = false;\n        }\n\n        if (task.type === 'microTask' && task.data && task.data instanceof Promise) {\n          // check whether the promise is a chained promise\n          if (task.data[AsyncTestZoneSpec.symbolParentUnresolved] === true) {\n            // chained promise is being scheduled\n            this.unresolvedChainedPromiseCount--;\n          }\n        }\n\n        return delegate.scheduleTask(target, task);\n      };\n\n      AsyncTestZoneSpec.prototype.onInvokeTask = function (delegate, current, target, task, applyThis, applyArgs) {\n        if (task.type !== 'eventTask') {\n          this._isSync = false;\n        }\n\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      };\n\n      AsyncTestZoneSpec.prototype.onCancelTask = function (delegate, current, target, task) {\n        if (task.type !== 'eventTask') {\n          this._isSync = false;\n        }\n\n        return delegate.cancelTask(target, task);\n      }; // Note - we need to use onInvoke at the moment to call finish when a test is\n      // fully synchronous. TODO(juliemr): remove this when the logic for\n      // onHasTask changes and it calls whenever the task queues are dirty.\n      // updated by(JiaLiPassion), only call finish callback when no task\n      // was scheduled/invoked/canceled.\n\n\n      AsyncTestZoneSpec.prototype.onInvoke = function (parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {\n        try {\n          this._isSync = true;\n          return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);\n        } finally {\n          var afterTaskCounts = parentZoneDelegate._taskCounts;\n\n          if (this._isSync) {\n            this._finishCallbackIfDone();\n          }\n        }\n      };\n\n      AsyncTestZoneSpec.prototype.onHandleError = function (parentZoneDelegate, currentZone, targetZone, error) {\n        // Let the parent try to handle the error.\n        var result = parentZoneDelegate.handleError(targetZone, error);\n\n        if (result) {\n          this.failCallback(error);\n          this._alreadyErrored = true;\n        }\n\n        return false;\n      };\n\n      AsyncTestZoneSpec.prototype.onHasTask = function (delegate, current, target, hasTaskState) {\n        delegate.hasTask(target, hasTaskState);\n\n        if (hasTaskState.change == 'microTask') {\n          this._pendingMicroTasks = hasTaskState.microTask;\n\n          this._finishCallbackIfDone();\n        } else if (hasTaskState.change == 'macroTask') {\n          this._pendingMacroTasks = hasTaskState.macroTask;\n\n          this._finishCallbackIfDone();\n        }\n      };\n\n      return AsyncTestZoneSpec;\n    }();\n\n    AsyncTestZoneSpec.symbolParentUnresolved = Zone.__symbol__('parentUnresolved'); // Export the class so that new instances can be created with proper\n    // constructor params.\n\n    Zone['AsyncTestZoneSpec'] = AsyncTestZoneSpec;\n  })(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);\n\n  Zone.__load_patch('asynctest', function (global, Zone, api) {\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done.\n     */\n    Zone[api.symbol('asyncTest')] = function asyncTest(fn) {\n      // If we're running using the Jasmine test framework, adapt to call the 'done'\n      // function when asynchronous activity is finished.\n      if (global.jasmine) {\n        // Not using an arrow function to preserve context passed from call site\n        return function (done) {\n          if (!done) {\n            // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n            // fake it here and assume sync.\n            done = function () {};\n\n            done.fail = function (e) {\n              throw e;\n            };\n          }\n\n          runInTestZone(fn, this, done, function (err) {\n            if (typeof err === 'string') {\n              return done.fail(new Error(err));\n            } else {\n              done.fail(err);\n            }\n          });\n        };\n      } // Otherwise, return a promise which will resolve when asynchronous activity\n      // is finished. This will be correctly consumed by the Mocha framework with\n      // it('...', async(myFn)); or can be used in a custom framework.\n      // Not using an arrow function to preserve context passed from call site\n\n\n      return function () {\n        var _this = this;\n\n        return new Promise(function (finishCallback, failCallback) {\n          runInTestZone(fn, _this, finishCallback, failCallback);\n        });\n      };\n    };\n\n    function runInTestZone(fn, context, finishCallback, failCallback) {\n      var currentZone = Zone.current;\n      var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n\n      if (AsyncTestZoneSpec === undefined) {\n        throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' + 'Please make sure that your environment includes zone.js/dist/async-test.js');\n      }\n\n      var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n\n      if (!ProxyZoneSpec) {\n        throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' + 'Please make sure that your environment includes zone.js/dist/proxy.js');\n      }\n\n      var proxyZoneSpec = ProxyZoneSpec.get();\n      ProxyZoneSpec.assertPresent(); // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n      // If we do it in ProxyZone then we will get to infinite recursion.\n\n      var proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n      var previousDelegate = proxyZoneSpec.getDelegate();\n      proxyZone.parent.run(function () {\n        var testZoneSpec = new AsyncTestZoneSpec(function () {\n          // Need to restore the original zone.\n          if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n            // Only reset the zone spec if it's\n            // sill this one. Otherwise, assume\n            // it's OK.\n            proxyZoneSpec.setDelegate(previousDelegate);\n          }\n\n          testZoneSpec.unPatchPromiseForTest();\n          currentZone.run(function () {\n            finishCallback();\n          });\n        }, function (error) {\n          // Need to restore the original zone.\n          if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n            // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n            proxyZoneSpec.setDelegate(previousDelegate);\n          }\n\n          testZoneSpec.unPatchPromiseForTest();\n          currentZone.run(function () {\n            failCallback(error);\n          });\n        }, 'test');\n        proxyZoneSpec.setDelegate(testZoneSpec);\n        testZoneSpec.patchPromiseForTest();\n      });\n      return Zone.current.runGuarded(fn, context);\n    }\n  });\n});","map":{"version":3,"sources":["D:/angular-material-todo/node_modules/zone.js/dist/async-test.js"],"names":["factory","define","amd","_global","AsyncTestZoneSpec","finishCallback","failCallback","namePrefix","_pendingMicroTasks","_pendingMacroTasks","_alreadyErrored","_isSync","runZone","Zone","current","unresolvedChainedPromiseCount","supportWaitUnresolvedChainedPromise","name","properties","__symbol__","prototype","isUnresolvedChainedPromisePending","_finishCallbackIfDone","_this","run","setTimeout","patchPromiseForTest","Promise","unPatchPromiseForTest","onScheduleTask","delegate","target","task","type","data","symbolParentUnresolved","scheduleTask","onInvokeTask","applyThis","applyArgs","invokeTask","onCancelTask","cancelTask","onInvoke","parentZoneDelegate","currentZone","targetZone","source","invoke","afterTaskCounts","_taskCounts","onHandleError","error","result","handleError","onHasTask","hasTaskState","hasTask","change","microTask","macroTask","window","self","global","__load_patch","api","symbol","asyncTest","fn","jasmine","done","fail","e","runInTestZone","err","Error","context","undefined","ProxyZoneSpec","proxyZoneSpec","get","assertPresent","proxyZone","getZoneWith","previousDelegate","getDelegate","parent","testZoneSpec","setDelegate","runGuarded"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACC,WAAUA,OAAV,EAAmB;AAChB,SAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAAvC,GAA6CD,MAAM,CAACD,OAAD,CAAnD,GACIA,OAAO,EADX;AAEH,CAHA,EAGE,YAAY;AACX;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,GAAC,UAAUG,OAAV,EAAmB;AAChB,QAAIC,iBAAiB,GAAkB,YAAY;AAC/C,eAASA,iBAAT,CAA2BC,cAA3B,EAA2CC,YAA3C,EAAyDC,UAAzD,EAAqE;AACjE,aAAKF,cAAL,GAAsBA,cAAtB;AACA,aAAKC,YAAL,GAAoBA,YAApB;AACA,aAAKE,kBAAL,GAA0B,KAA1B;AACA,aAAKC,kBAAL,GAA0B,KAA1B;AACA,aAAKC,eAAL,GAAuB,KAAvB;AACA,aAAKC,OAAL,GAAe,KAAf;AACA,aAAKC,OAAL,GAAeC,IAAI,CAACC,OAApB;AACA,aAAKC,6BAAL,GAAqC,CAArC;AACA,aAAKC,mCAAL,GAA2C,KAA3C;AACA,aAAKC,IAAL,GAAY,uBAAuBV,UAAnC;AACA,aAAKW,UAAL,GAAkB;AAAE,+BAAqB;AAAvB,SAAlB;AACA,aAAKF,mCAAL,GACIb,OAAO,CAACU,IAAI,CAACM,UAAL,CAAgB,qCAAhB,CAAD,CAAP,KAAoE,IADxE;AAEH;;AACDf,MAAAA,iBAAiB,CAACgB,SAAlB,CAA4BC,iCAA5B,GAAgE,YAAY;AACxE,eAAO,KAAKN,6BAAL,GAAqC,CAA5C;AACH,OAFD;;AAGAX,MAAAA,iBAAiB,CAACgB,SAAlB,CAA4BE,qBAA5B,GAAoD,YAAY;AAC5D,YAAIC,KAAK,GAAG,IAAZ;;AACA,YAAI,EAAE,KAAKf,kBAAL,IAA2B,KAAKC,kBAAhC,IACD,KAAKO,mCAAL,IAA4C,KAAKK,iCAAL,EAD7C,CAAJ,EAC6F;AACzF;AACA,eAAKT,OAAL,CAAaY,GAAb,CAAiB,YAAY;AACzBC,YAAAA,UAAU,CAAC,YAAY;AACnB,kBAAI,CAACF,KAAK,CAACb,eAAP,IAA0B,EAAEa,KAAK,CAACf,kBAAN,IAA4Be,KAAK,CAACd,kBAApC,CAA9B,EAAuF;AACnFc,gBAAAA,KAAK,CAAClB,cAAN;AACH;AACJ,aAJS,EAIP,CAJO,CAAV;AAKH,WAND;AAOH;AACJ,OAbD;;AAcAD,MAAAA,iBAAiB,CAACgB,SAAlB,CAA4BM,mBAA5B,GAAkD,YAAY;AAC1D,YAAI,CAAC,KAAKV,mCAAV,EAA+C;AAC3C;AACH;;AACD,YAAIU,mBAAmB,GAAGC,OAAO,CAACd,IAAI,CAACM,UAAL,CAAgB,qBAAhB,CAAD,CAAjC;;AACA,YAAIO,mBAAJ,EAAyB;AACrBA,UAAAA,mBAAmB;AACtB;AACJ,OARD;;AASAtB,MAAAA,iBAAiB,CAACgB,SAAlB,CAA4BQ,qBAA5B,GAAoD,YAAY;AAC5D,YAAI,CAAC,KAAKZ,mCAAV,EAA+C;AAC3C;AACH;;AACD,YAAIY,qBAAqB,GAAGD,OAAO,CAACd,IAAI,CAACM,UAAL,CAAgB,uBAAhB,CAAD,CAAnC;;AACA,YAAIS,qBAAJ,EAA2B;AACvBA,UAAAA,qBAAqB;AACxB;AACJ,OARD;;AASAxB,MAAAA,iBAAiB,CAACgB,SAAlB,CAA4BS,cAA5B,GAA6C,UAAUC,QAAV,EAAoBhB,OAApB,EAA6BiB,MAA7B,EAAqCC,IAArC,EAA2C;AACpF,YAAIA,IAAI,CAACC,IAAL,KAAc,WAAlB,EAA+B;AAC3B,eAAKtB,OAAL,GAAe,KAAf;AACH;;AACD,YAAIqB,IAAI,CAACC,IAAL,KAAc,WAAd,IAA6BD,IAAI,CAACE,IAAlC,IAA0CF,IAAI,CAACE,IAAL,YAAqBP,OAAnE,EAA4E;AACxE;AACA,cAAIK,IAAI,CAACE,IAAL,CAAU9B,iBAAiB,CAAC+B,sBAA5B,MAAwD,IAA5D,EAAkE;AAC9D;AACA,iBAAKpB,6BAAL;AACH;AACJ;;AACD,eAAOe,QAAQ,CAACM,YAAT,CAAsBL,MAAtB,EAA8BC,IAA9B,CAAP;AACH,OAZD;;AAaA5B,MAAAA,iBAAiB,CAACgB,SAAlB,CAA4BiB,YAA5B,GAA2C,UAAUP,QAAV,EAAoBhB,OAApB,EAA6BiB,MAA7B,EAAqCC,IAArC,EAA2CM,SAA3C,EAAsDC,SAAtD,EAAiE;AACxG,YAAIP,IAAI,CAACC,IAAL,KAAc,WAAlB,EAA+B;AAC3B,eAAKtB,OAAL,GAAe,KAAf;AACH;;AACD,eAAOmB,QAAQ,CAACU,UAAT,CAAoBT,MAApB,EAA4BC,IAA5B,EAAkCM,SAAlC,EAA6CC,SAA7C,CAAP;AACH,OALD;;AAMAnC,MAAAA,iBAAiB,CAACgB,SAAlB,CAA4BqB,YAA5B,GAA2C,UAAUX,QAAV,EAAoBhB,OAApB,EAA6BiB,MAA7B,EAAqCC,IAArC,EAA2C;AAClF,YAAIA,IAAI,CAACC,IAAL,KAAc,WAAlB,EAA+B;AAC3B,eAAKtB,OAAL,GAAe,KAAf;AACH;;AACD,eAAOmB,QAAQ,CAACY,UAAT,CAAoBX,MAApB,EAA4BC,IAA5B,CAAP;AACH,OALD,CAtE+C,CA4E/C;AACA;AACA;AACA;AACA;;;AACA5B,MAAAA,iBAAiB,CAACgB,SAAlB,CAA4BuB,QAA5B,GAAuC,UAAUC,kBAAV,EAA8BC,WAA9B,EAA2CC,UAA3C,EAAuDhB,QAAvD,EAAiEQ,SAAjE,EAA4EC,SAA5E,EAAuFQ,MAAvF,EAA+F;AAClI,YAAI;AACA,eAAKpC,OAAL,GAAe,IAAf;AACA,iBAAOiC,kBAAkB,CAACI,MAAnB,CAA0BF,UAA1B,EAAsChB,QAAtC,EAAgDQ,SAAhD,EAA2DC,SAA3D,EAAsEQ,MAAtE,CAAP;AACH,SAHD,SAIQ;AACJ,cAAIE,eAAe,GAAGL,kBAAkB,CAACM,WAAzC;;AACA,cAAI,KAAKvC,OAAT,EAAkB;AACd,iBAAKW,qBAAL;AACH;AACJ;AACJ,OAXD;;AAYAlB,MAAAA,iBAAiB,CAACgB,SAAlB,CAA4B+B,aAA5B,GAA4C,UAAUP,kBAAV,EAA8BC,WAA9B,EAA2CC,UAA3C,EAAuDM,KAAvD,EAA8D;AACtG;AACA,YAAIC,MAAM,GAAGT,kBAAkB,CAACU,WAAnB,CAA+BR,UAA/B,EAA2CM,KAA3C,CAAb;;AACA,YAAIC,MAAJ,EAAY;AACR,eAAK/C,YAAL,CAAkB8C,KAAlB;AACA,eAAK1C,eAAL,GAAuB,IAAvB;AACH;;AACD,eAAO,KAAP;AACH,OARD;;AASAN,MAAAA,iBAAiB,CAACgB,SAAlB,CAA4BmC,SAA5B,GAAwC,UAAUzB,QAAV,EAAoBhB,OAApB,EAA6BiB,MAA7B,EAAqCyB,YAArC,EAAmD;AACvF1B,QAAAA,QAAQ,CAAC2B,OAAT,CAAiB1B,MAAjB,EAAyByB,YAAzB;;AACA,YAAIA,YAAY,CAACE,MAAb,IAAuB,WAA3B,EAAwC;AACpC,eAAKlD,kBAAL,GAA0BgD,YAAY,CAACG,SAAvC;;AACA,eAAKrC,qBAAL;AACH,SAHD,MAIK,IAAIkC,YAAY,CAACE,MAAb,IAAuB,WAA3B,EAAwC;AACzC,eAAKjD,kBAAL,GAA0B+C,YAAY,CAACI,SAAvC;;AACA,eAAKtC,qBAAL;AACH;AACJ,OAVD;;AAWA,aAAOlB,iBAAP;AACH,KAlHsC,EAAvC;;AAmHAA,IAAAA,iBAAiB,CAAC+B,sBAAlB,GAA2CtB,IAAI,CAACM,UAAL,CAAgB,kBAAhB,CAA3C,CApHgB,CAqHhB;AACA;;AACAN,IAAAA,IAAI,CAAC,mBAAD,CAAJ,GAA4BT,iBAA5B;AACH,GAxHD,EAwHG,OAAOyD,MAAP,KAAkB,WAAlB,IAAiCA,MAAjC,IAA2C,OAAOC,IAAP,KAAgB,WAAhB,IAA+BA,IAA1E,IAAkFC,MAxHrF;;AAyHAlD,EAAAA,IAAI,CAACmD,YAAL,CAAkB,WAAlB,EAA+B,UAAUD,MAAV,EAAkBlD,IAAlB,EAAwBoD,GAAxB,EAA6B;AACxD;AACR;AACA;AACA;AACQpD,IAAAA,IAAI,CAACoD,GAAG,CAACC,MAAJ,CAAW,WAAX,CAAD,CAAJ,GAAgC,SAASC,SAAT,CAAmBC,EAAnB,EAAuB;AACnD;AACA;AACA,UAAIL,MAAM,CAACM,OAAX,EAAoB;AAChB;AACA,eAAO,UAAUC,IAAV,EAAgB;AACnB,cAAI,CAACA,IAAL,EAAW;AACP;AACA;AACAA,YAAAA,IAAI,GAAG,YAAY,CAAG,CAAtB;;AACAA,YAAAA,IAAI,CAACC,IAAL,GAAY,UAAUC,CAAV,EAAa;AACrB,oBAAMA,CAAN;AACH,aAFD;AAGH;;AACDC,UAAAA,aAAa,CAACL,EAAD,EAAK,IAAL,EAAWE,IAAX,EAAiB,UAAUI,GAAV,EAAe;AACzC,gBAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzB,qBAAOJ,IAAI,CAACC,IAAL,CAAU,IAAII,KAAJ,CAAUD,GAAV,CAAV,CAAP;AACH,aAFD,MAGK;AACDJ,cAAAA,IAAI,CAACC,IAAL,CAAUG,GAAV;AACH;AACJ,WAPY,CAAb;AAQH,SAjBD;AAkBH,OAvBkD,CAwBnD;AACA;AACA;AACA;;;AACA,aAAO,YAAY;AACf,YAAInD,KAAK,GAAG,IAAZ;;AACA,eAAO,IAAII,OAAJ,CAAY,UAAUtB,cAAV,EAA0BC,YAA1B,EAAwC;AACvDmE,UAAAA,aAAa,CAACL,EAAD,EAAK7C,KAAL,EAAYlB,cAAZ,EAA4BC,YAA5B,CAAb;AACH,SAFM,CAAP;AAGH,OALD;AAMH,KAlCD;;AAmCA,aAASmE,aAAT,CAAuBL,EAAvB,EAA2BQ,OAA3B,EAAoCvE,cAApC,EAAoDC,YAApD,EAAkE;AAC9D,UAAIuC,WAAW,GAAGhC,IAAI,CAACC,OAAvB;AACA,UAAIV,iBAAiB,GAAGS,IAAI,CAAC,mBAAD,CAA5B;;AACA,UAAIT,iBAAiB,KAAKyE,SAA1B,EAAqC;AACjC,cAAM,IAAIF,KAAJ,CAAU,qFACZ,4EADE,CAAN;AAEH;;AACD,UAAIG,aAAa,GAAGjE,IAAI,CAAC,eAAD,CAAxB;;AACA,UAAI,CAACiE,aAAL,EAAoB;AAChB,cAAM,IAAIH,KAAJ,CAAU,iFACZ,uEADE,CAAN;AAEH;;AACD,UAAII,aAAa,GAAGD,aAAa,CAACE,GAAd,EAApB;AACAF,MAAAA,aAAa,CAACG,aAAd,GAb8D,CAc9D;AACA;;AACA,UAAIC,SAAS,GAAGrE,IAAI,CAACC,OAAL,CAAaqE,WAAb,CAAyB,eAAzB,CAAhB;AACA,UAAIC,gBAAgB,GAAGL,aAAa,CAACM,WAAd,EAAvB;AACAH,MAAAA,SAAS,CAACI,MAAV,CAAiB9D,GAAjB,CAAqB,YAAY;AAC7B,YAAI+D,YAAY,GAAG,IAAInF,iBAAJ,CAAsB,YAAY;AACjD;AACA,cAAI2E,aAAa,CAACM,WAAd,MAA+BE,YAAnC,EAAiD;AAC7C;AACA;AACA;AACAR,YAAAA,aAAa,CAACS,WAAd,CAA0BJ,gBAA1B;AACH;;AACDG,UAAAA,YAAY,CAAC3D,qBAAb;AACAiB,UAAAA,WAAW,CAACrB,GAAZ,CAAgB,YAAY;AACxBnB,YAAAA,cAAc;AACjB,WAFD;AAGH,SAZkB,EAYhB,UAAU+C,KAAV,EAAiB;AAChB;AACA,cAAI2B,aAAa,CAACM,WAAd,MAA+BE,YAAnC,EAAiD;AAC7C;AACAR,YAAAA,aAAa,CAACS,WAAd,CAA0BJ,gBAA1B;AACH;;AACDG,UAAAA,YAAY,CAAC3D,qBAAb;AACAiB,UAAAA,WAAW,CAACrB,GAAZ,CAAgB,YAAY;AACxBlB,YAAAA,YAAY,CAAC8C,KAAD,CAAZ;AACH,WAFD;AAGH,SAtBkB,EAsBhB,MAtBgB,CAAnB;AAuBA2B,QAAAA,aAAa,CAACS,WAAd,CAA0BD,YAA1B;AACAA,QAAAA,YAAY,CAAC7D,mBAAb;AACH,OA1BD;AA2BA,aAAOb,IAAI,CAACC,OAAL,CAAa2E,UAAb,CAAwBrB,EAAxB,EAA4BQ,OAA5B,CAAP;AACH;AACJ,GAvFD;AAwFH,CA7NA,CAAD","sourcesContent":["'use strict';\n/**\n * @license Angular v12.0.0-next.0\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n(function (factory) {\n    typeof define === 'function' && define.amd ? define(factory) :\n        factory();\n}((function () {\n    'use strict';\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (_global) {\n        var AsyncTestZoneSpec = /** @class */ (function () {\n            function AsyncTestZoneSpec(finishCallback, failCallback, namePrefix) {\n                this.finishCallback = finishCallback;\n                this.failCallback = failCallback;\n                this._pendingMicroTasks = false;\n                this._pendingMacroTasks = false;\n                this._alreadyErrored = false;\n                this._isSync = false;\n                this.runZone = Zone.current;\n                this.unresolvedChainedPromiseCount = 0;\n                this.supportWaitUnresolvedChainedPromise = false;\n                this.name = 'asyncTestZone for ' + namePrefix;\n                this.properties = { 'AsyncTestZoneSpec': this };\n                this.supportWaitUnresolvedChainedPromise =\n                    _global[Zone.__symbol__('supportWaitUnResolvedChainedPromise')] === true;\n            }\n            AsyncTestZoneSpec.prototype.isUnresolvedChainedPromisePending = function () {\n                return this.unresolvedChainedPromiseCount > 0;\n            };\n            AsyncTestZoneSpec.prototype._finishCallbackIfDone = function () {\n                var _this = this;\n                if (!(this._pendingMicroTasks || this._pendingMacroTasks ||\n                    (this.supportWaitUnresolvedChainedPromise && this.isUnresolvedChainedPromisePending()))) {\n                    // We do this because we would like to catch unhandled rejected promises.\n                    this.runZone.run(function () {\n                        setTimeout(function () {\n                            if (!_this._alreadyErrored && !(_this._pendingMicroTasks || _this._pendingMacroTasks)) {\n                                _this.finishCallback();\n                            }\n                        }, 0);\n                    });\n                }\n            };\n            AsyncTestZoneSpec.prototype.patchPromiseForTest = function () {\n                if (!this.supportWaitUnresolvedChainedPromise) {\n                    return;\n                }\n                var patchPromiseForTest = Promise[Zone.__symbol__('patchPromiseForTest')];\n                if (patchPromiseForTest) {\n                    patchPromiseForTest();\n                }\n            };\n            AsyncTestZoneSpec.prototype.unPatchPromiseForTest = function () {\n                if (!this.supportWaitUnresolvedChainedPromise) {\n                    return;\n                }\n                var unPatchPromiseForTest = Promise[Zone.__symbol__('unPatchPromiseForTest')];\n                if (unPatchPromiseForTest) {\n                    unPatchPromiseForTest();\n                }\n            };\n            AsyncTestZoneSpec.prototype.onScheduleTask = function (delegate, current, target, task) {\n                if (task.type !== 'eventTask') {\n                    this._isSync = false;\n                }\n                if (task.type === 'microTask' && task.data && task.data instanceof Promise) {\n                    // check whether the promise is a chained promise\n                    if (task.data[AsyncTestZoneSpec.symbolParentUnresolved] === true) {\n                        // chained promise is being scheduled\n                        this.unresolvedChainedPromiseCount--;\n                    }\n                }\n                return delegate.scheduleTask(target, task);\n            };\n            AsyncTestZoneSpec.prototype.onInvokeTask = function (delegate, current, target, task, applyThis, applyArgs) {\n                if (task.type !== 'eventTask') {\n                    this._isSync = false;\n                }\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            };\n            AsyncTestZoneSpec.prototype.onCancelTask = function (delegate, current, target, task) {\n                if (task.type !== 'eventTask') {\n                    this._isSync = false;\n                }\n                return delegate.cancelTask(target, task);\n            };\n            // Note - we need to use onInvoke at the moment to call finish when a test is\n            // fully synchronous. TODO(juliemr): remove this when the logic for\n            // onHasTask changes and it calls whenever the task queues are dirty.\n            // updated by(JiaLiPassion), only call finish callback when no task\n            // was scheduled/invoked/canceled.\n            AsyncTestZoneSpec.prototype.onInvoke = function (parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {\n                try {\n                    this._isSync = true;\n                    return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);\n                }\n                finally {\n                    var afterTaskCounts = parentZoneDelegate._taskCounts;\n                    if (this._isSync) {\n                        this._finishCallbackIfDone();\n                    }\n                }\n            };\n            AsyncTestZoneSpec.prototype.onHandleError = function (parentZoneDelegate, currentZone, targetZone, error) {\n                // Let the parent try to handle the error.\n                var result = parentZoneDelegate.handleError(targetZone, error);\n                if (result) {\n                    this.failCallback(error);\n                    this._alreadyErrored = true;\n                }\n                return false;\n            };\n            AsyncTestZoneSpec.prototype.onHasTask = function (delegate, current, target, hasTaskState) {\n                delegate.hasTask(target, hasTaskState);\n                if (hasTaskState.change == 'microTask') {\n                    this._pendingMicroTasks = hasTaskState.microTask;\n                    this._finishCallbackIfDone();\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    this._pendingMacroTasks = hasTaskState.macroTask;\n                    this._finishCallbackIfDone();\n                }\n            };\n            return AsyncTestZoneSpec;\n        }());\n        AsyncTestZoneSpec.symbolParentUnresolved = Zone.__symbol__('parentUnresolved');\n        // Export the class so that new instances can be created with proper\n        // constructor params.\n        Zone['AsyncTestZoneSpec'] = AsyncTestZoneSpec;\n    })(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);\n    Zone.__load_patch('asynctest', function (global, Zone, api) {\n        /**\n         * Wraps a test function in an asynchronous test zone. The test will automatically\n         * complete when all asynchronous calls within this zone are done.\n         */\n        Zone[api.symbol('asyncTest')] = function asyncTest(fn) {\n            // If we're running using the Jasmine test framework, adapt to call the 'done'\n            // function when asynchronous activity is finished.\n            if (global.jasmine) {\n                // Not using an arrow function to preserve context passed from call site\n                return function (done) {\n                    if (!done) {\n                        // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                        // fake it here and assume sync.\n                        done = function () { };\n                        done.fail = function (e) {\n                            throw e;\n                        };\n                    }\n                    runInTestZone(fn, this, done, function (err) {\n                        if (typeof err === 'string') {\n                            return done.fail(new Error(err));\n                        }\n                        else {\n                            done.fail(err);\n                        }\n                    });\n                };\n            }\n            // Otherwise, return a promise which will resolve when asynchronous activity\n            // is finished. This will be correctly consumed by the Mocha framework with\n            // it('...', async(myFn)); or can be used in a custom framework.\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var _this = this;\n                return new Promise(function (finishCallback, failCallback) {\n                    runInTestZone(fn, _this, finishCallback, failCallback);\n                });\n            };\n        };\n        function runInTestZone(fn, context, finishCallback, failCallback) {\n            var currentZone = Zone.current;\n            var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n            if (AsyncTestZoneSpec === undefined) {\n                throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n                    'Please make sure that your environment includes zone.js/dist/async-test.js');\n            }\n            var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n            if (!ProxyZoneSpec) {\n                throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n                    'Please make sure that your environment includes zone.js/dist/proxy.js');\n            }\n            var proxyZoneSpec = ProxyZoneSpec.get();\n            ProxyZoneSpec.assertPresent();\n            // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n            // If we do it in ProxyZone then we will get to infinite recursion.\n            var proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n            var previousDelegate = proxyZoneSpec.getDelegate();\n            proxyZone.parent.run(function () {\n                var testZoneSpec = new AsyncTestZoneSpec(function () {\n                    // Need to restore the original zone.\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's\n                        // sill this one. Otherwise, assume\n                        // it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    testZoneSpec.unPatchPromiseForTest();\n                    currentZone.run(function () {\n                        finishCallback();\n                    });\n                }, function (error) {\n                    // Need to restore the original zone.\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    testZoneSpec.unPatchPromiseForTest();\n                    currentZone.run(function () {\n                        failCallback(error);\n                    });\n                }, 'test');\n                proxyZoneSpec.setDelegate(testZoneSpec);\n                testZoneSpec.patchPromiseForTest();\n            });\n            return Zone.current.runGuarded(fn, context);\n        }\n    });\n})));\n"]},"metadata":{},"sourceType":"script"}